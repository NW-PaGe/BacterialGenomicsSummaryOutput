---
title: "Bacterial Genomics - Summary Report"
date: today
author: 
  - name: "Marcela Torres <br> Dahlia Walters"
    affiliation: "Molecular Epidemiology Program, WA DOH"
format: 
  html:
    self-contained: true
params:
  taxa: "Klebsiella_pneumoniae" 
---

```{r, results='hide', echo=FALSE, message=FALSE, warning=FALSE}
library(dplyr)
library(knitr)
library(kableExtra)
library(tidyverse)
library(lubridate)
library(tools)
library(htmltools)
```

```{r, results='hide', echo=FALSE, message=FALSE, warning=FALSE}
source("scripts/load_files.R")
source("scripts/summarytsv_outputs.R")
source("scripts/SNP_min_max.R")
source("scripts/metadata_summarytsv.R")
```

```{r taxa, echo = FALSE}
# Load the taxa dataset
results_by_taxa <- read.csv("outputs_scripts/results_by_taxa.csv", stringsAsFactors = FALSE)

# Filter for the specific taxa
taxa_data <- results_by_taxa %>%
  filter(TAXA == params$taxa)

# Check if data is available for this taxa
if (nrow(taxa_data) == 0) {
  cat("No data available for this taxa.")
  knitr::knit_exit()  # Stops execution for empty reports
}
```

## Overview New Samples

There are `r nrow(newseq)` new sequencing results in this BigBacter run.

This is the mapping of the sequencing ID to the corresponding WDRS CASE_ID, if available
```{r overview_new_samples_table, echo = FALSE}
mapping_file <- file.path("outputs_scripts", "mapping_case_ID.RData")

load(mapping_file)

#Table attributes
kable(mapping_case_ID) %>%
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "responsive"),
    full_width = FALSE,
    position = "left",
    font_size = 12,
    html_font = "Arial"
  ) %>%
  row_spec(0, bold = TRUE)

```

The new isolates were classified by BigBacter as follows:
```{r new_isolates_table, echo = FALSE}
outputs_script_dir <- "outputs_scripts"

newseq_file <- list.files(outputs_script_dir, pattern = "newseq.RData$", full.names = TRUE)

loaded_newseq <- load(newseq_file[1])

summary_new_seq <- bind_rows(get(loaded_newseq[1]))

#Table attributes
kable(summary_new_seq) %>%
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "responsive"),
    full_width = FALSE,
    position = "left",
    font_size = 12,
    html_font = "Arial"
  ) %>%
  row_spec(0, bold = TRUE)

```

Of these, the following isolates resulted in new genetic clusters:

```{r new_clusters_table, echo = FALSE}
#Identify samples that resulted in new clusters
new_clust<-newseq %>% 
  filter(ISO_IN_CLUSTER==1)

#Table attributes
if (nrow(new_clust) > 0) {
  kable(new_clust) %>%
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "responsive"),
    full_width = FALSE,
    position = "left",
    font_size = 12,
    html_font = "Arial"
  ) %>%
  row_spec(0, bold = TRUE)
} else {
  message("There were no new clusters created in this run")
}
```

## Failed Isolates

The following isolates failed quality control.

```{r failed_isolates_table, echo = FALSE}
outputs_script_dir <- "outputs_scripts"

failed_file <- list.files(outputs_script_dir, pattern = "failed.RData$", full.names = TRUE)

loaded_failed <- load(failed_file[1])

failed_df <- bind_rows(get(loaded_failed[1]))

if (nrow(failed_df) > 0) {
  kable(failed_df) %>%
    kable_styling(
      bootstrap_options = c("striped", "hover", "condensed", "responsive"),
      full_width = FALSE,
      position = "left",
      font_size = 12,
      html_font = "Arial"
    ) %>%
    row_spec(0, bold = TRUE)
} else {
  message("There weren't any isolates that failed in this run")
}

```

## Recombination

Bacterial recombination is the process where bacteria exchange genetic material with each other which leads to the gain of new DNA sequences into their genomes.  It is important to be aware of recombination when conducting genomic analyses because recombination events can be confused with mutations events which can impact metrics used to characterize relationships between sequences, such as calculating single nucleotide polymorphisms (SNP) distances. The bioinformatics pipelines developed at WA PHL use Gubbins, a method to detect and control for recombination. If recombination is detected the sites where recombination is present are masked in the SNPs distance calculations and in the phylogenetic trees. 

We evaluate recombination in multiple ways. First the number of sites where recombination was detected is divided by the total length of the core genome. If recombination is more than 5% in a genomic cluster the Gubbins outputs are used. If recombination is more than 1% but less than 5%, then the Snippy and Gubbins outputs are reviewed jointly to see if they yield different interpretations. If the interpretations differ, then most likely we will use the Gubbins for the genomic interpretations.

```{r recombination, echo = FALSE}
outputs_script_dir <- "outputs_scripts"

recomb_file <- list.files(outputs_script_dir, pattern = "recomb_summary.RData$", full.names = TRUE)

loaded_summary_recomb <- load(recomb_file[1])

summary_recomb <- bind_rows(get(loaded_summary_recomb[1]))


if (nrow(summary_recomb) > 0) {
  kable(summary_recomb) %>%
    kable_styling(
      bootstrap_options = c("striped", "hover", "condensed", "responsive"),
      full_width = FALSE,
      position = "left",
      font_size = 12,
      html_font = "Arial"
    ) %>%
    row_spec(0, bold = TRUE)
} else {
  message("Recombination wasn't calculated")
}

```

*Sequences that resulted in new genetic clusters are excluded from this calculation.*

## SNP Min and Max Distances

The minimum and maximum SNP distances for each genomic cluster by each method, Snippy and Gubbins, are summarized below

```{r snp_min_max_table, echo = FALSE}
outputs_script_dir <- "outputs_scripts"

snpminmax_file <- list.files(outputs_script_dir, pattern = "summary_snp_minmax.RData$", full.names = TRUE)

loaded_snp_minmax <- load(snpminmax_file[1])

summary_snp <- bind_rows(get(loaded_snp_minmax[1]))

if (nrow(summary_snp) > 0) {
  kable(summary_snp) %>%
    kable_styling(
      bootstrap_options = c("striped", "hover", "condensed", "responsive"),
      full_width = FALSE,
      position = "left",
      font_size = 12,
      html_font = "Arial"
    ) %>%
    row_spec(0, bold = TRUE)
} else {
  message("SNP distances weren't calculated")
}

```

*Sequences that resulted in new genetic clusters are excluded from this calculation.*

## Genomic Linkages

Based on the SNP distances these are the strong (0-10 SNPs) and intermediate (11-50 SNPs) linkages found among the new isolate/s and other sequences in the corresponding genomic clusters.

```{r genomic_linkages_tables, echo=FALSE, results='asis'}

outputs_script_dir <- "outputs_scripts"


snplinks_file <- list.files(outputs_script_dir, pattern = "summary_snp_linkages.RData$", full.names = TRUE)
loaded_snp_links <- load(snplinks_file[1])


summary_snp_links <- bind_rows(get(loaded_snp_links[1]))

if (nrow(summary_snp_links) == 0) {
  cat("SNP distances weren't calculated\n")
} else {

  summary_snp_links <- summary_snp_links %>% filter(STATUS == "NEW")
  
  if (nrow(summary_snp_links) == 0) {

    cat("Genomic linkages were not detected among the new sequence/s and the other isolates in that genomic cluster\n")
  } else {
    unique_sources <- unique(summary_snp_links$Source)

    for (source in unique_sources) {
      filtered_links <- summary_snp_links %>%
        filter(Source == source)

      if (nrow(filtered_links) > 0) {
        filtered_links <- filtered_links %>%
          select(-Source, -STATUS) %>%
          rename(
            ID = ID1,
            `StrongGenLinks (0-10 SNP)` = StrongGenLinkage,
            `InterGenLinks (11-50 SNP)` = InterGenLinkage
          ) %>% 
         group_by(ID) %>%
         summarize(
          `StrongGenLinks (0-10 SNP)` = str_remove(str_replace_all(paste(na.omit(unique(`StrongGenLinks (0-10 SNP)`)), collapse = ", "), "\\s*,\\s*,", ", "), "^,\\s*"),
`InterGenLinks (11-50 SNP)` = str_remove(str_replace_all(paste(na.omit(unique(`InterGenLinks (11-50 SNP)`)), collapse = ", "), "\\s*,\\s*,", ", "), "^,\\s*")
    ) %>%
      ungroup()
        
        cat(paste0("#### Genomic linkages for ", source, "\n\n"))

        cat(kable(filtered_links) %>%
          kable_styling(
            bootstrap_options = c("striped", "hover", "condensed", "responsive"),
            full_width = FALSE,
            position = "left",
            font_size = 12,
            html_font = "Arial"
          ) %>%
          row_spec(0, bold = TRUE) %>%
          as.character(), "\n")
      }
    }
  }
}
```


## Metadata

This is an overview of the metadata pertaining to each of the genomic clusters that contain new isolates. The facilities are the submitting facilities and the counties the submitting facilities' county.

```{r metadata_table, echo = FALSE}

results_dir <- "metadata_summ"

rdata_files <- list.files(results_dir, pattern = "\\.RData$", full.names = TRUE)

#Extract taxa from the filename
extract_taxa <- function(filename) {
  parts <- unlist(strsplit(filename, "_"))  # Split by underscore
  return(paste(parts[1], parts[2], sep = "_"))  # Combine first two parts
}

#Empty list to store all data frames
all_data <- list()

#Load and collect each data frame
for (file in rdata_files) {
  load(file)
  file_name <- file_path_sans_ext(basename(file))
  taxa_name <- extract_taxa(file_name)
  
  #Add a new column to the data frame with the file name
  combined_df <- combined_df %>%
    mutate(Taxa_GenomicCluster = file_name)%>%
    filter(taxa_name == params$taxa)%>%
    select(Taxa_GenomicCluster, everything())
  
  #Store the modified data frame in the list
  all_data[[file_name]] <- combined_df
}

#Bind all the data frames into one combined data frame
final_metadata <- bind_rows(all_data)

#Table attributes
kable(final_metadata) %>%
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "responsive"),
    full_width = FALSE,
    position = "left",
    font_size = 10,
    html_font = "Arial"
  ) %>%
  row_spec(0, bold = TRUE)

```



## Resources
The code to generate this report is available here: \
<https://github.com/NW-PaGe/BacterialGenomicsSummaryOutput>\

The following bioinformatics methods were used by WA PHL to generate some of the data summarized in this report:\
BigBacter bioinformatics pipeline <https://github.com/doh-jdj0303/bigbacter-nf>\
Snippy <https://github.com/tseemann/snippy>\
Gubbins <https://github.com/nickjcroucher/gubbins>
